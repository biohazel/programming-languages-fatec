EX1:

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

float delta (float a, float b, float c)
{
    return b*b-4*a*c;
}

float x1 (float a, float b, float c)
{
    if (delta(a,b,c)>=0)
        return (-b+sqrt(delta(a,b,c)))/(2*a);
    return -9999999;
}

float xv(float a, float b)
{
    return -b/(2*a);
}

float yv(float a, float b, float c)
{
    return -(delta(a,b,c)/(4*a));
}



float x2 (float a, float b, float c)
{
    if (delta(a,b,c)>=0)
        return (-b-sqrt(delta(a,b,c)))/(2*a);
    return -9999999;
}


int main()
{
    float A, B, C;
    printf("\nDigite o valor de A: ");
    scanf("%f",&A);
    printf("\nDigite o valor de B: ");
    scanf("%f",&B);
    printf("\nDigite o valor de C: ");
    scanf("%f",&C);

    printf("\nDelta: %f\n",delta(A,B,C));
    if (delta(A,B,C)>=0)
    {
         printf("\nX1   : %f\n",x1(A,B,C));
         printf("\nX2   : %f\n",x2(A,B,C));
    }
    else
        printf("\nNao existem raizes reais\n\n");

    printf("\nXv   : %f\n",xv(A,B));
    printf("\nYv   : %f\n",yv(A,B,C));





    return 0;
}

EX2:

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

float delta (float a, float b, float c)
{
    return b*b-4*a*c;
}

float x1 (float a, float b, float c)
{
    if (delta(a,b,c)>=0)
        return (-b+sqrt(delta(a,b,c)))/(2*a);
    return -9999999;
}

float xv(float a, float b)
{
    return -b/(2*a);
}

float yv(float a, float b, float c)
{
    return -(delta(a,b,c)/(4*a));
}



float x2 (float a, float b, float c)
{
    if (delta(a,b,c)>=0)
        return (-b-sqrt(delta(a,b,c)))/(2*a);
    return -9999999;
}


int raizes (float a, float b, float c, float *x1, float *x2)
{
    float dt=delta(a,b,c);
    if (dt>=0)
    {
        *x1=(-b+sqrt(dt))/(2*a);
        *x2=(-b-sqrt(dt))/(2*a);
        return 0;
    }
    return 1;
}



int main()
{
    float A, B, C, X1, X2;
    printf("\nDigite o valor de A: ");
    scanf("%f",&A);
    printf("\nDigite o valor de B: ");
    scanf("%f",&B);
    printf("\nDigite o valor de C: ");
    scanf("%f",&C);

    printf("\nDelta: %f\n",delta(A,B,C));
    if (!raizes(A,B,C,&X1,&X2))
    {
         printf("\nX1   : %f\n",X1);
         printf("\nX2   : %f\n",X2);
    }
    else
        printf("\nNao existem raizes reais\n\n");

    printf("\nXv   : %f\n",xv(A,B));
    printf("\nYv   : %f\n",yv(A,B,C));





    return 0;
}


EX3

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define TAM 2


void registrar (float m[][TAM])
{
    int linha, coluna;
    for(linha=0;linha<TAM;linha++)
        for (coluna=0;coluna<TAM;coluna++)
           {
               printf("\nDigite valor: ");
               scanf("%f",&m[linha][coluna]);
           }
}


void imprimir (float m[][TAM])
{
    int linha, coluna;
    system("cls");
    printf("* * * *   M A T R I Z   * * * *\n\n");
    for(linha=0;linha<TAM;linha++)
    {
        printf("\n");
          for (coluna=0;coluna<TAM;coluna++)
             printf("%.2f\t",m[linha][coluna]);
    }
    printf("\n\n");
    system("pause");
}

float somatoria (float m[][TAM])
{
    int linha, coluna;
    float somatoria=0;
    for(linha=0;linha<TAM;linha++)
        for (coluna=0;coluna<TAM;coluna++)
            somatoria+=m[linha][coluna];
    return somatoria;
}



int main()
{
    float matriz[TAM][TAM];
    registrar(matriz);
    imprimir(matriz);
    printf("\nSomatoria: %.2f\n\n",somatoria(matriz));
    return 0;
}


EX4

#include <stdio.h>
#include <stdlib.h>
#define TAM 10


int inserir (int l[], int p, int *f, int e)
{
    if (*f>=TAM-1)
        return 1;
    if ((p<0) || (p>*f+1))
        return 2;
    *f=*f+1;
    for (int i=*f;i>p;i--)
        l[i]=l[i-1];
    l[p]=e;
    return 0;
}

int remover (int l[], int p, int *f)
{
    if (*f<0)
        return 1;
    if ((p<0) || (p>*f))
        return 2;
    for (int i=p;i<*f;i++)
        l[i]=l[i+1];
    *f=*f-1;
    return 0;
}

int imprimir (int l[], int f)
{
    if (f<0)
        return 1;
    system("cls");
    printf("* * * *   L I S T A   * * * *\n\n");
    for(int i=0;i<=f;i++)
        printf("%d\t",l[i]);
    printf("\n\n");
    system("pause");
    return 0;
}

int tela ()
{
    int op;
    system("cls");
    printf("* * * *   M E N U   * * * *\n\n");
    printf("\n1 - Inserir");
    printf("\n2 - Remover");
    printf("\n3 - Imprimir");
    printf("\n9 - Sair");
    printf("\nDigite a sua opcao: ");
    scanf("%d",&op);
    return op;
}

int main()
{
    int lista[TAM];
    int fim=-1;
    int elemento, posicao, opcao, flag;
    do
    {
        opcao=tela();
        switch(opcao)
        {
            case 1 : system("cls");
                     printf("\nDigite o elemento: ");
                     scanf("%d",&elemento);
                     printf("\nDigite a posicao entre [0] e [%d]: ",fim+1);
                     scanf("%d",&posicao);
                     flag=inserir(lista,posicao, &fim,elemento);
                     if (flag==0)
                        printf("\n\nElemento inserido com sucesso!!\n\n");
                        else
                            if (flag==1)
                               printf("\nImpossivel inserir, lista cheia!\n\n");
                            else
                                printf("\nImpossivel inserir, posicao invalida!!\n\n");
                      system("pause");
                      break;

          case 2 :   system("cls");
                     printf("\nDigite a posicao entre [0] e [%d]: ",fim);
                     scanf("%d",&posicao);
                     flag=remover(lista,posicao, &fim);
                     if (flag==0)
                        printf("\n\nElemento removido com sucesso!!\n\n");
                        else
                            if (flag==1)
                               printf("\nImpossivel remover, lista vazia!\n\n");
                            else
                                printf("\nImpossivel remover, posicao invalida!!\n\n");
                      system("pause");
                      break;

            case 3:   flag=imprimir(lista,fim);
                      if (flag!=0)
                        {
                            printf("\n\nLista Vazia!\n\n");
                            system("pause");
                        }
                       break;


        }



    }while(opcao!=9);


    return 0;
}
